{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pallete","App","state","text","undefined","author","color","opacity","getQuote","_callee","API_call","data","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","document","getElementById","classList","add","_this","setState","quote","Math","floor","random","length","dosth","stop","this","remove","setTimeout","react_default","createElement","className","style","backgroundColor","id","class","href","encodeURIComponent","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGMA,SAAQ,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,YAkDtEC,6MAhDbC,MAAM,CACJC,UAAKC,EACLC,YAAOD,EACPE,WAAMF,EACNG,QAAQ,KAYVC,8BAAU,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACaC,MAAM,2CADnB,cACHR,EADGK,EAAAI,KAAAJ,EAAAE,KAAA,EAEQP,EAASU,OAFjB,OAEHT,EAFGI,EAAAI,KAGEE,SAASC,eAAe,aAC9BC,UAAUC,IAAI,QACnBC,EAAKC,SAAS,SAACxB,GAAD,MAAU,CACtBC,KAAKQ,EAAKgB,MACVtB,OAAOM,EAAKN,OACZC,MAAMN,EAAQ4B,KAAKC,MAAMD,KAAKE,SAAS9B,EAAQ+B,YAEjDN,EAAKO,QAVI,yBAAAjB,EAAAkB,SAAAxB,EAAAyB,6FATRA,KAAK1B,2CAGLa,SAASC,eAAe,aAAaC,UAAUY,OAAO,QACxDC,WAAW,WACTf,SAASC,eAAe,aAAaC,UAAUC,IAAI,SACjD,sCAgBF,OACEa,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAgBP,KAAKhC,MAAMI,QACtD+B,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,OAAOG,GAAG,aACvBL,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,eACfF,EAAAxB,EAAAyB,cAAA,KAAGK,MAAM,sBAAwBN,EAAAxB,EAAAyB,cAAA,KAAGI,GAAG,OAAOF,MAAO,CAAClC,MAAM4B,KAAKhC,MAAMI,QAAS4B,KAAKhC,MAAMC,MAASkC,EAAAxB,EAAAyB,cAAA,KAAGK,MAAM,uBAC3GN,EAAAxB,EAAAyB,cAAA,KAAGI,GAAG,SAASF,MAAO,CAAClC,MAAM4B,KAAKhC,MAAMI,QAAS,IAAI4B,KAAKhC,MAAMG,SAElEgC,EAAAxB,EAAAyB,cAAA,WACAD,EAAAxB,EAAAyB,cAAA,OAAKK,MAAM,UAEVN,EAAAxB,EAAAyB,cAAA,KAAGI,GAAG,eAAeE,KAAM,8EAA+EC,mBAAmB,IAAKX,KAAKhC,MAAMC,KAAO,QAAgB+B,KAAKhC,MAAMG,QAASyC,OAAO,UAA/L,IAAyMT,EAAAxB,EAAAyB,cAAA,KAAGK,MAAM,wBAAwBH,MAAO,CAACC,gBAAgBP,KAAKhC,MAAMI,UAC5Q+B,EAAAxB,EAAAyB,cAAA,UAAQI,GAAG,YAAYF,MAAO,CAACC,gBAAgBP,KAAKhC,MAAMI,OAAQyC,QAASb,KAAK1B,UAAhF,4BAzCMwC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAxB,EAAAyB,cAACkB,EAAD,MAASnC,SAASC,eAAe,SDuH3C,kBAAmBmC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.974f6416.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nconst pallete=[\"#008E9B\",\"#008F7A\",\"#4B4453\",\"#00C9A7\",\"#C34A36\",\"#B25B00\",\"#402E32\",\"#812A00\"];\r\nclass App extends Component {\r\n  state={\r\n    text:undefined,\r\n    author:undefined,\r\n    color:undefined,\r\n    opacity:1\r\n  }\r\n  componentWillMount(){\r\n    this.getQuote();\r\n  }\r\n  dosth(){\r\n    document.getElementById('quote-box').classList.remove('hide');\r\n  setTimeout(function(){\r\n    document.getElementById('quote-box').classList.add('show')\r\n   }, 1000);\r\n  }\r\n  \r\n  getQuote= async ()=>{\r\n   const API_call= await fetch(\"https://talaikis.com/api/quotes/random/\");\r\n   const data=await API_call.json();\r\n   const elem=document.getElementById('quote-box');\r\n   elem.classList.add('hide');\r\n   this.setState((state)=>({\r\n     text:data.quote,\r\n     author:data.author,\r\n     color:pallete[Math.floor(Math.random()*pallete.length)]\r\n   }));\r\n   this.dosth();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\" style={{backgroundColor:this.state.color}}>\r\n        <div className=\"card\" id=\"quote-box\">\r\n          <div className=\"mycontainer\">\r\n          <i class=\"fas fa-quote-left\"></i><p id=\"text\" style={{color:this.state.color}}>{this.state.text}</p><i class=\"fas fa-quote-right\"></i>\r\n            <p id=\"author\" style={{color:this.state.color}}>{'-'+this.state.author}</p>\r\n          </div>\r\n          <hr/>\r\n          <div class=\"footer\">\r\n        \r\n           <a id=\"tweeet-quote\" href={\"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"+ encodeURIComponent('\"' +this.state.text + '\" ' +'\\n'+'-'+ this.state.author)} target=\"_blank\"> <i class=\"fab fa-twitter myicon\" style={{backgroundColor:this.state.color}}></i></a>\r\n            <button id=\"new-quote\" style={{backgroundColor:this.state.color}} onClick={this.getQuote}>Generate Quote</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}